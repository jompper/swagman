/*
 * Pacman - LevelOne
 * 21.12.2013
 * Copyright (c) 2013 Joni Salmi. All rights reserved.
 */
package pacman.level;

/**
 * Basic Pac-Man level
 * @author Joni
 */
public class LevelOne implements Level {

    /**
     * Map data
     */
    private final int level[][];
    private final int width;
    private final int height;

    /**
     * Construct level
     */
    public LevelOne() {

        /**
         * Classic Pacman map
         *
         * Tiles: 0 = Empty, 1 = PacDot, 2 = PowerPellet, 3 = Cherry, 4 = Pacman
         * 5 = Blinky, 6 = Pinky, 7 = Inky, 8 = Clyde, 10 = Wall Left-Right, 11
         * = Wall Top-Down, 12 = Wall Right-Down, 13 = Wall Right-up, 14 = Wall
         * Left-Down, 15 = Wall Left-Up
         */
        level = new int[][]{
            {20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
            {20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
            {20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
            {12, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 12, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14},
            {11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11},
            {11, 1, 12, 10, 10, 14, 1, 12, 10, 10, 10, 14, 1, 11, 11, 1, 12, 10, 10, 10, 14, 1, 12, 10, 10, 14, 1, 11},
            {11, 2, 11, 0, 0, 11, 1, 11, 0, 0, 0, 11, 1, 11, 11, 1, 11, 0, 0, 0, 11, 1, 11, 0, 0, 11, 2, 11},
            {11, 1, 13, 10, 10, 15, 1, 13, 10, 10, 10, 15, 1, 13, 15, 1, 13, 10, 10, 10, 15, 1, 13, 10, 10, 15, 1, 11},
            {11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11},
            {11, 1, 12, 10, 10, 14, 1, 12, 14, 1, 12, 10, 10, 10, 10, 10, 10, 14, 1, 12, 14, 1, 12, 10, 10, 14, 1, 11},
            {11, 1, 13, 10, 10, 15, 1, 11, 11, 1, 13, 10, 10, 14, 12, 10, 10, 15, 1, 11, 11, 1, 13, 10, 10, 15, 1, 11},
            {11, 1, 1, 1, 1, 1, 1, 11, 11, 1, 1, 1, 1, 11, 11, 1, 1, 1, 1, 11, 11, 1, 1, 1, 1, 1, 1, 11},
            {13, 10, 10, 10, 10, 14, 1, 11, 13, 10, 10, 14, 0, 11, 11, 0, 12, 10, 10, 15, 11, 1, 12, 10, 10, 10, 10, 15},
            {20, 20, 20, 20, 20, 11, 1, 11, 12, 10, 10, 15, 0, 13, 15, 0, 13, 10, 10, 14, 11, 1, 11, 20, 20, 20, 20, 20},
            {20, 20, 20, 20, 20, 11, 1, 11, 11, 0, 0, 0, 0, 9, 5, 0, 0, 0, 0, 11, 11, 1, 11, 20, 20, 20, 20, 20},
            {20, 20, 20, 20, 20, 11, 1, 11, 11, 0, 12, 10, 10, 16, 17, 10, 10, 14, 0, 11, 11, 1, 11, 20, 20, 20, 20, 20},
            {10, 10, 10, 10, 10, 15, 1, 13, 15, 0, 11, 20, 20, 20, 20, 20, 20, 11, 0, 13, 15, 1, 13, 10, 10, 10, 10, 10},
            {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 20, 7, 20, 6, 20, 8, 11, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
            {10, 10, 10, 10, 10, 14, 1, 12, 14, 0, 11, 20, 20, 20, 20, 20, 20, 11, 0, 12, 14, 1, 12, 10, 10, 10, 10, 10},
            {20, 20, 20, 20, 20, 11, 1, 11, 11, 0, 13, 10, 10, 10, 10, 10, 10, 15, 0, 11, 11, 1, 11, 20, 20, 20, 20, 20},
            {20, 20, 20, 20, 20, 11, 1, 11, 11, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 11, 11, 1, 11, 20, 20,20, 20, 20},
            {20, 20, 20, 20, 20, 11, 1, 11, 11, 0, 12, 10, 10, 10, 10, 10, 10, 14, 0, 11, 11, 1, 11, 20, 20, 20, 20, 20},
            {12, 10, 10, 10, 10, 15, 1, 13, 15, 0, 13, 10, 10, 14, 12, 10, 10, 15, 0, 13, 15, 1, 13, 10, 10, 10, 10, 14},
            {11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11},
            {11, 1, 12, 10, 10, 14, 1, 12, 10, 10, 10, 14, 1, 11, 11, 1, 12, 10, 10, 10, 14, 1, 12, 10, 10, 14, 1, 11},
            {11, 1, 13, 10, 14, 11, 1, 13, 10, 10, 10, 15, 1, 13, 15, 1, 13, 10, 10, 10, 15, 1, 11, 12, 10, 15, 1, 11},
            {11, 2, 1, 1, 11, 11, 1, 1, 1, 1, 1, 1, 1, 0, 4, 1, 1, 1, 1, 1, 1, 1, 11, 11, 1, 1, 2, 11},
            {13, 10, 14, 1, 11, 11, 1, 12, 14, 1, 12, 10, 10, 10, 10, 10, 10, 14, 1, 12, 14, 1, 11, 11, 1, 12, 10, 15},
            {12, 10, 15, 1, 13, 15, 1, 11, 11, 1, 13, 10, 10, 14, 12, 10, 10, 15, 1, 11, 11, 1, 13, 15, 1, 13, 10, 14},
            {11, 1, 1, 1, 1, 1, 1, 11, 11, 1, 1, 1, 1, 11, 11, 1, 1, 1, 1, 11, 11, 1, 1, 1, 1, 1, 1, 11},
            {11, 1, 12, 10, 10, 10, 10, 15, 13, 10, 10, 14, 1, 11, 11, 1, 12, 10, 10, 15, 13, 10, 10, 10, 10, 14, 1, 11},
            {11, 1, 13, 10, 10, 10, 10, 10, 10, 10, 10, 15, 1, 13, 15, 1, 13, 10, 10, 10, 10, 10, 10, 10, 10, 15, 1, 11},
            {11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11},
            {13, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15},
            {20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20}
        };

        this.width = level[0].length;
        this.height = level.length;
    }

    /**
     * @return int[][] level
     */
    @Override
    public int[][] getLevel() {
        return level;
    }

    /**
     * @return level width
     */
    @Override
    public int getWidth() {
        return this.width;
    }

    /**
     * @return level height
     */
    @Override
    public int getHeight() {
        return this.height;
    }

    /**
     *
     * @param x
     * @param y
     * @return true if map position contains wall
     */
    @Override
    public boolean isBlocked(int x, int y) {
        if (x < 0 || x >= this.width || y < 0 || y >= this.height) {
            return false;
        }
        return this.level[y][x] > 9 && this.level[y][x] < 20;
    }

}
